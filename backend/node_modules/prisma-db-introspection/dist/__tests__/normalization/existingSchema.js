"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_datamodel_1 = require("prisma-datamodel");
var modelNameAndDirectiveNormalizer_1 = require("../../common/modelNameAndDirectiveNormalizer");
function testWithExisting(schemaFromDb, existingSchema, expectedResultSchema) {
    var parser = prisma_datamodel_1.Parser.create(prisma_datamodel_1.DatabaseType.mongo);
    var fromDb = parser.parseFromSchemaString(schemaFromDb);
    var existing = parser.parseFromSchemaString(existingSchema);
    var normalizer = new modelNameAndDirectiveNormalizer_1.default(existing);
    normalizer.normalize(fromDb);
    var renderer = prisma_datamodel_1.DefaultRenderer.create(prisma_datamodel_1.DatabaseType.mongo);
    var resultSchema = renderer.render(fromDb);
    expect(resultSchema).toEqual(expectedResultSchema);
}
describe('Schema normalization from existing schema', function () {
    it('Should copy names and directives from an existing schema.', function () {
        var schemaFromDb = "\n      type useru {\n        age: Int!\n        name: String!\n        birthdaydate: Date!\n        posts: [post!]!\n        signUpDate: Date!\n      }\n\n      type post @embedded {\n        text: String!\n        likes: Int!\n      }";
        // User has renamed a few types, but post is missing 
        var existingSchema = "\n      type User @db(name: \"useru\") {\n        age: Int!\n        name: String!\n        birthday: Date! @db(name: \"birthdaydate\")\n        signedUp: Date! @db(name: \"signUpDate\") @createdAt\n      }";
        // The expected result schema
        var expectedResultSchema = prisma_datamodel_1.dedent("\n      type User @db(name: \"useru\") {\n        age: Int!\n        birthday: Date! @db(name: \"birthdaydate\")\n        name: String!\n        posts: [UserPost!]!\n        signedUp: Date! @createdAt @db(name: \"signUpDate\")\n      }\n\n      type UserPost @embedded {\n        likes: Int!\n        text: String!\n      }");
        testWithExisting(schemaFromDb, existingSchema, expectedResultSchema);
    });
    it('Should identify ID field correctly.', function () {
        var schemaFromDb = "\n      type useru {\n        _id: String! @id\n        name: String!\n        age: Int!\n      }";
        // User has a renamed ID field
        var existingSchema = "\n      type User @db(name: \"useru\") {\n        email: String! @id\n        name: String!\n      }";
        var expectedResultSchema = prisma_datamodel_1.dedent("\n      type User @db(name: \"useru\") {\n        age: Int!\n        email: String! @id\n        name: String!\n      }");
        testWithExisting(schemaFromDb, existingSchema, expectedResultSchema);
    });
});
//# sourceMappingURL=existingSchema.js.map